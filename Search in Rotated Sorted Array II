public class Solution {
    public boolean search(int[] A, int target) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(A == null || A.length == 0){
            return false;
        }
        
        return binarySearch(A,target);
    }
    
    
    
    //O(n)
    boolean searchN(int[] A,int target){
        int n = A.length;
        for(int i = 0 ; i < n;i++){
            if(A[i] == target){
                return true;
            }
        }
        return false;
    }
    
    //O(logN)
    boolean binarySearch(int[] num, int target){
        
        int n = num.length;
        int low = 0;
        int high = n -1;
        while(low < high){
            
            if(num[low] == target || num[high] == target){
                return true;
            }
            int mid = low + (high - low) /2;
            if(num[mid] == target){
                return true;
            }else if(num[mid] > target){
                 if(target > num[high]){
                     high = mid -1;
                 }else if(target < num[high]){
                     if(num[mid] > num[high]){
                         low = mid +1;
                     }else if(num[mid] < num[high]){
                         high = mid -1;
                     }else{
                         high--;
                     }
                 }
                //}                
            }else{
                if(target > num[high]){
                    if(num[mid] < num[high]){
                        high = mid -1;
                    }else if(num[mid] > num[high]){
                        low = mid +1;
                    }else{
                        high--;
                    }
                }else{
                    low = mid+1;
                }
            }            
        }
        if(low >= 0 && low < n && num[low] == target || high >= 0 && high < n && num[high] == target){
            return true;
        }
        return false;
    }
}