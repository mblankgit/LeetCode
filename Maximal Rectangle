public class Solution {
    public int maximalRectangle(char[][] matrix) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(matrix == null || matrix.length == 0){
            return 0;
        }
        
        int max = 0;
        int n = matrix.length;
        int m = matrix[0].length;
        int[] height = new int[m];
        for(int i = 0 ; i < n;i++){
            for(int j = 0 ; j < m; j++){
                if(matrix[i][j] == '0'){
                    height[j] = 0;
                }else{
                    height[j] ++;
                }
            }
            int tmp = maxSize(height);
            if(tmp > max){
                max = tmp;
            }
        }
        
        return max ;
    }
    
    int maxSize(int[] nums){
        int max = 0;int i = 0;
        Stack<Integer> sts = new Stack<Integer>();
        for(i = 0 ; i < nums.length;i++){
            if(sts.empty() || nums[i] >= nums[sts.peek()]){
                sts.push(i);
            }else{
                while(!sts.empty() && nums[i] < nums[sts.peek()]){
                    int size = nums[sts.pop()] * (sts.empty()?i:i - sts.peek() - 1);
                    if(size > max){
                        max = size;
                    }
                }
                sts.push(i);
            }
        }
        while(!sts.empty()){
            int size = nums[sts.pop()] * (sts.empty() ? i : i - sts.peek() -1);
            if(size > max){
                max = size;
            }
        }
        return max;
    }
}


///will pass the large set

public class Solution {
    public int maximalRectangle(char[][] matrix) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(matrix == null || matrix.length == 0){
            return 0;
        }
        int n = matrix.length;
        int m = matrix[0].length;
        
        int[] left = new int[m];
        int[] right = new int[m];
        int[] height = new int[m];
        for(int i = 0; i < m ;i++){
            right[i] = m;
        }
        
        int res = 0;
        
        for(int i = 0 ; i < n; i++){
            int l = 0 ; int r = m;
            for(int j = 0 ; j < m ;j++){
                if(matrix[i][j] == '1'){
                    height[j]++;
                    left[j] = Math.max(left[j],l);
                }else{
                    height[j] = 0;
                    l = j + 1;
                    left[j] = 0;
                    right[j] = m;
                }
            }
            
            for(int j = m -1; j>= 0 ; j--){
                if(matrix[i][j] == '1'){
                    right[j] = Math.min(right[j],r);
                    res = Math.max(res,height[j] * (right[j] - left[j]));
                }else{
                    r = j;
                }
            }
        }
        return res;
    }
}

