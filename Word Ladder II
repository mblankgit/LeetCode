public class Solution {
    

    
    public ArrayList<ArrayList<String>> findLadders(String start, String end, HashSet<String> dict) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<String>> res = new ArrayList<ArrayList<String>>();
        ///use bfs to find all paths
        Queue<String> ques = new LinkedList<String>();
        Queue<Integer> counts = new LinkedList<Integer>();
        Map<String,List<String>> parents = new HashMap<String,List<String>>();
        Map<String,Integer> plevel = new HashMap<String,Integer>();
        
        int min = -1;
        ques.add(start);
        counts.add(1);
        List<String> adds = new ArrayList<String>();
        adds.add(start);
        parents.put(start,adds);
        plevel.put(start,1);
        
        while(ques.peek() != null){
            String str = ques.poll();
            int count = counts.poll();
            if(min > 0 && count == min){continue;}
            for(int i = 0 ; i < str.length();i++){
                for(char j = 'a' ; j<= 'z';j++){
                    if(j == str.charAt(i)){continue;}
                    char[] atts = str.toCharArray();
                    atts[i] = j;
                    String nstr = new String(atts);
                    if(nstr.equals(end)){
                        min = count+1;
                        List<String> sts = new ArrayList<String>();
                        sts.add(end);
                        sts.add(str);
                        getPath(parents,str,sts,res);
                    }else if(!dict.contains(nstr))
                    {
                        continue;
                    }else if(!parents.containsKey(nstr)){
                        List<String> pts = new ArrayList<String>();
                        pts.add(str);
                        parents.put(nstr,pts);
                        plevel.put(nstr,count+1);
                        ques.add(nstr);
                        counts.add(count+1);
                    }else if(plevel.get(nstr) == count+1){
                        parents.get(nstr).add(str);
                        //ques.add(nstr);
                        //counts.add(count+1);
                    }                    
                }
            }
            
        }
        return res;        
    }
    
    
    void getPath(Map<String,List<String>> parents,String str,List<String> adds,ArrayList<ArrayList<String>> res){
        if(parents.get(str).size() == 1 && parents.get(str).get(0).equals(str)){
            ArrayList<String> tmps = new ArrayList<String>();
            for(int i = adds.size() - 1; i >= 0; i--){
                tmps.add(adds.get(i));
            }
           res.add(tmps);
           return;
        }
        for(String p : parents.get(str)){
            adds.add(p);
            getPath(parents,p,adds,res);
            adds.remove(adds.size() - 1);
        }
        return;
    }
}