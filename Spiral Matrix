public class Solution {
    public ArrayList<Integer> spiralOrder(int[][] matrix) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<Integer> results = new ArrayList<Integer>();
        int level = 0;
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return results;
        }
        int M = matrix.length;
        int N = matrix[0].length;
        int small = Math.min(N,M);
        int times = small /2 ;
        if(small % 2 !=0){
            times++;
        }
        while(level < times){
            int startx = level;
            int starty = level;
            int lenm = M - 1;
            int lenn = N - 1;
            if(N == 1 && M == 1){
                results.add(matrix[startx][starty]);
                level++;
                continue;
            }
            if(lenm == 0){
                /// add column
                for(int i = 0 ; i < N;i++){
                    results.add(matrix[startx ][starty +i]);
                }
                level++;
                continue;
            }else if(lenn == 0){
                //add row
                for(int i = 0 ; i < M;i++){
                    results.add(matrix[startx + i][starty ]);
                }
                level++;
                continue;
            }
            ///top left to right
            for(int i = 0; i <  lenn; i++){
                results.add(matrix[startx ][ starty + i]);
            }
            starty += lenn; 
            ///top right to down
            for(int i = 0 ; i < lenm; i++){
                results.add(matrix[startx + i][starty]);
            }
            startx += lenm;
            //down right to left
            for(int i = 0 ; i < lenn ;i ++){
                results.add(matrix[startx][ starty - i]);
            }
            starty -= lenn;
            //down left to top
            for(int i = 0 ; i < lenm;i++){
                results.add(matrix[startx - i][starty]);
            }
            level++;
             //new M & N
            M = M - 2  ;
            N = N - 2  ;
        }
        return results;
    }
}