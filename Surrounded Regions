

public class Solution {
    public void solve(char[][] board) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(board == null || board.length == 0){
            return;
        }
        
        int n = board.length;
        int m = board[0].length;
        
        for(int i = 0 ; i < m; i++){
            bfs(board,0,i);
            bfs(board,n-1,i);
        }
        
        for(int i = 0 ; i < n; i++){
            bfs(board,i,0);
            bfs(board,i,m-1);
        }
        
        for(int i = 0 ; i < n ; i ++){
            for(int j = 0 ; j < m;j++){
                if(board[i][j] == '+'){
                    board[i][j] = 'O';
                }else if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
            }
        }
    }
    
    void bfs(char[][] board,int i,int j){
        Queue<Integer> ques = new LinkedList<Integer>();
        visit(board,i,j,ques);
        while(ques.peek() != null){
            int tmp = ques.poll();
            int t = tmp / board[0].length;
            int s = tmp % board[0].length;
            visit(board,t+1,s,ques);
            visit(board,t,s+1,ques);
            visit(board,t-1,s,ques);
            visit(board,t,s-1,ques);
        }     
    }
    
    void visit(char[][] board,int i , int j, Queue<Integer> ques){
        int n = board.length;
        int m = board[0].length;
        if(i >= n || j >= m || i < 0 || j < 0 || board[i][j] != 'O'){return;}
        board[i][j] = '+';
        ques.offer(i* m + j);
    }
}