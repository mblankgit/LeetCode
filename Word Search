public class Solution {
    public boolean exist(char[][] board, String word) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(board.length == 0 || board[0].length == 0){
            return false;
        }else if(word.length() == 0 ){
            return true;
        }
        //dfs
        int M = board.length;
        int N = board[0].length;
        boolean[][] visited = new boolean[M][N];
        for(int i = 0 ; i < M  ; i++){
            for(int j = 0 ; j < N;j++){
                if(board[i][j] != word.charAt(0)){
                    continue;
                }
                if(dfs(board,i,j,word,0,visited,M,N)){
                    return true;
                }    
                visited = new boolean[M][N];
            }
        }
        return false;     
    }
    
    boolean dfs(char[][] board, int m,int n,String word, int index,boolean[][] visited,int M ,int N){
        if(index == word.length()){
            return true;
        }
        if(m >= M || n >= N || m < 0 || n < 0 || visited[m][n]){
            return false;
        }
        if(board[m][n] == word.charAt(index)){
            visited[m][n] = true;
            /// visit left node
            return dfs(board,m + 1, n,word,index+1,visited,M,N)||
                    dfs(board,m - 1,n, word,index+1,visited,M,N)||
                        dfs(board,m,n+1,word,index+1,visited,M,N)||
                            dfs(board,m,n-1,word,index+1,visited,M,N);
        }else{
            return false;
        }
    }
}