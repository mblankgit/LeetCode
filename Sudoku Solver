public class Solution {
    public void solveSudoku(char[][] board) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(board == null || board.length == 0 || board[0].length == 0){
            return ;
        }
        solve(board);
    }
    
    boolean solve(char[][] board){
        for(int i = 0 ; i < 9 ; i++){
            for(int j = 0 ; j < 9; j++){
                if(board[i][j] == '.'){
                    for(int k = 1; k < 10 ;k++){
                        board[i][j] = (char)('0' + k);
                        if(valid(board,i,j) && solve(board)){
                            return true;
                        }
                        board[i][j] = '.';
                    }                   
                    return false;
                }
            }
        }
        return true;
    }
    
    boolean valid(char[][] board,int n, int m){
        for(int i = 0 ; i < 9;i++){
            if(board[n][m] == board[n][i] && i != m){
                return false;
            }
            if(board[n][m] == board[i][m] && i != n){
                return false;
            }
        }
        int bn = n - n % 3;
        int bm = m - m % 3;
        for(int i = 0 ; i < 3; i++){
            for(int j = 0 ; j < 3; j++){
                if((bn +i) != n && (bm+j) != m && board[i + bn][j + bm] == board[n][m]){
                    return false;
                }
            }
        }
        return true;
    }
}