/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public ArrayList<TreeNode> generateTrees(int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<TreeNode> res = new ArrayList<TreeNode>();
        if(n <= 0){
            res.add(null);
            return res;
        }
        int[] nums = new int[n+1];
        for(int i = 1; i <= n ; i++){
            nums[i] = i;
        }
        return build(nums,1,n);
    }
    
    ArrayList<TreeNode> build(int[] num,int start,int end){
        ArrayList<TreeNode> results = new ArrayList<TreeNode>();
        if(start > end ){
            return results;
        }
        
        for(int i = start; i <= end ; i++){
            ArrayList<TreeNode> lefts = build(num,start,i-1);
            ArrayList<TreeNode> rights = build(num,i+1,end);
            for(TreeNode lf : lefts){
                for(TreeNode rt : rights){
                    TreeNode node = new TreeNode(num[i]);
                    node.left = lf;
                    node.right = rt;
                    results.add(node);
                }
            }
            if(lefts.size() == 0 && rights.size() == 0){
                TreeNode node = new TreeNode(num[i]);
                results.add(node);
            }else if(lefts.size() == 0 && rights.size() != 0){
                for(TreeNode rt : rights){
                    TreeNode node = new TreeNode(num[i]);
                    node.right = rt;
                    results.add(node);
                }
            }else if(lefts.size() != 0 && rights.size() == 0){
                for(TreeNode lf : lefts){
                    TreeNode node = new TreeNode(num[i]);
                    node.left = lf;
                    results.add(node);
                }
            }
        }
        return results;
    }
    
    
}